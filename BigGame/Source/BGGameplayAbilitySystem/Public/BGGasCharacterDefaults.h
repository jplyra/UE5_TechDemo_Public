// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "BGGasAbility.h"
#include "Engine/DataAsset.h"
#include "BGGasCharacterDefaults.generated.h"

class UBGGasEffect;

class UInputAction;

USTRUCT(BlueprintType)
struct FBGGameplayInputAbilityInfo
{
	GENERATED_USTRUCT_BODY()
 
	UPROPERTY(EditAnywhere, Category = "GameplayInputAbilityInfo")
	TSubclassOf<UBGGasAbility> GameplayAbilityClass{};

	UPROPERTY(EditAnywhere, Category = "GameplayInputAbilityInfo")
	TObjectPtr<UInputAction> InputAction{};
	
	UPROPERTY(VisibleAnywhere, Category = "GameplayInputAbilityInfo")
	int32 AutoGeneratedInputID{};

	bool IsValid() const
	{
		return GameplayAbilityClass && InputAction;
	}
 
	bool operator==(const FBGGameplayInputAbilityInfo& Other) const
	{
		return GameplayAbilityClass == Other.GameplayAbilityClass && InputAction == Other.InputAction;
	}

	bool operator!=(const FBGGameplayInputAbilityInfo& Other) const
	{
		return !operator==(Other);
	}

	friend uint32 GetTypeHash(const FBGGameplayInputAbilityInfo& Item)
	{
		return HashCombine(GetTypeHash(Item.GameplayAbilityClass), GetTypeHash(Item.InputAction));
	}
};

UCLASS()
class BGGAMEPLAYABILITYSYSTEM_API UBGGasCharacterDefaults : public UPrimaryDataAsset
{
	GENERATED_BODY()

public:
	UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = "GAS|Abilities")
	TSet<FBGGameplayInputAbilityInfo> InputAbilities;

	UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = "GAS|Abilities")
	TArray<TSubclassOf<UBGGasAbility>> NonInputAbilities;

	UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = "GAS|Effects")
	TSubclassOf<UBGGasEffect> DefaultAttributes;
	
	UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = "GAS|Effects")
	TArray<TSubclassOf<UBGGasEffect>> StartupEffects;

#if WITH_EDITOR
	virtual void PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent) override;
#endif
};
