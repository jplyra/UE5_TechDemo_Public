// Fill out your copyright notice in the Description page of Project Settings.

#include "Player/BGPlayerCharacter.h"
#include "EnhancedInputComponent.h"
#include "EnhancedInputSubsystems.h"
#include "AbilitySystemComponent.h"
#include "BGControllableWidget.h"
#include "FBGWidgetControllerParams.h"
#include "BGGasCharacterDefaults.h"
#include "BGInventorySubsystem.h"
#include "Camera/CameraComponent.h"
#include "GameFramework/SpringArmComponent.h"
#include "GameFramework/HUD.h"
#include "Player/BGPlayerState.h"

DEFINE_LOG_CATEGORY_STATIC(LogBGPlayerCharacter, Log, All)

ABGPlayerCharacter::ABGPlayerCharacter()
{
	PrimaryActorTick.bCanEverTick = true;

	CameraBoom = CreateDefaultSubobject<USpringArmComponent>(FName("CameraBoom"));
	CameraBoom->SetupAttachment(RootComponent);
	CameraBoom->bUsePawnControlRotation = true;
	CameraBoom->SetRelativeLocation(FVector(0, 0, 68.492264));

	FollowCamera = CreateDefaultSubobject<UCameraComponent>(FName("FollowCamera"));
	FollowCamera->SetupAttachment(CameraBoom);
	FollowCamera->FieldOfView = 80.0f;
}

void ABGPlayerCharacter::OnAbilityInputPressed(const int32 InputID) const
{
	if (GetAbilitySystemComponent())
	{
		GetAbilitySystemComponent()->AbilityLocalInputPressed(InputID);
	}
}

void ABGPlayerCharacter::OnAbilityInputReleased(const int32 InputID) const
{
	if (GetAbilitySystemComponent())
	{
		GetAbilitySystemComponent()->AbilityLocalInputReleased(InputID);
	}
}

void ABGPlayerCharacter::BeginPlay()
{
	Super::BeginPlay();
	HandleInventoryEventBinding(true);
}

void ABGPlayerCharacter::EndPlay(const EEndPlayReason::Type EndPlayReason)
{
	HandleInventoryEventBinding(false);
	Super::EndPlay(EndPlayReason);
}

void ABGPlayerCharacter::PossessedBy(AController* NewController)
{
	Super::PossessedBy(NewController);
	
	if (ABGPlayerState* PS = GetPlayerState<ABGPlayerState>())
	{
		AbilitySystemComponent = Cast<UBGGasComponent>(PS->GetAbilitySystemComponent());
		PS->GetAbilitySystemComponent()->InitAbilityActorInfo(PS, this);
		AttributeSet = PS->GetAttributeSet();

		InitializeDefaultAttributes();
		InitializeStartupEffects();
		InitializeDefaultAbilities();

		if (APlayerController* PlayerController = Cast<APlayerController>(GetController()))
		{
			if (IBGControllableWidget* ControllableHUD = Cast<IBGControllableWidget>(PlayerController->GetHUD()))
			{
				ControllableHUD->InitOverlay(FBGWidgetControllerParams(PlayerController, PS, AbilitySystemComponent, AttributeSet));
			}
		}
	}
}

void ABGPlayerCharacter::OnRep_PlayerState()
{
	Super::OnRep_PlayerState();

	if (ABGPlayerState* PS = GetPlayerState<ABGPlayerState>())
	{
		AbilitySystemComponent = Cast<UBGGasComponent>(PS->GetAbilitySystemComponent());
		PS->GetAbilitySystemComponent()->InitAbilityActorInfo(PS, this);
		AttributeSet = PS->GetAttributeSet();

		InitializeDefaultAttributes();
	}
}

void ABGPlayerCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)
{
	Super::SetupPlayerInputComponent(PlayerInputComponent);

	if (const APlayerController* PlayerController = Cast<APlayerController>(GetController()))
	{
		if (const ULocalPlayer* LocalPlayer = PlayerController->GetLocalPlayer())
		{
			if (UEnhancedInputLocalPlayerSubsystem* Subsystem = LocalPlayer->GetSubsystem<UEnhancedInputLocalPlayerSubsystem>())
			{
				constexpr int32 Priority = 0;
				Subsystem->AddMappingContext(DefaultMappingContext, Priority);
			}
		}
	}

	if (UEnhancedInputComponent* EnhancedInputComponent = Cast<UEnhancedInputComponent>(PlayerInputComponent))
	{
		if (DefaultAbilities)
		{
			const TSet<FBGGameplayInputAbilityInfo>& InputAbilities = DefaultAbilities->InputAbilities;
			for (const FBGGameplayInputAbilityInfo& It : InputAbilities)
			{
				if (It.IsValid())
				{
					const UInputAction* InputAction = It.InputAction;
					const int32 InputID = It.AutoGeneratedInputID;
     
					EnhancedInputComponent->BindActionInstanceLambda(InputAction, ETriggerEvent::Started,
						[this, InputID](const FInputActionInstance& ActionInstance)
						{
							OnAbilityInputPressed(InputID);
						});

					EnhancedInputComponent->BindActionInstanceLambda(InputAction, ETriggerEvent::Completed,
						[this, InputID](const FInputActionInstance& ActionInstance)
						{
							OnAbilityInputReleased(InputID);
						});
				}
			}
		}
	}

	BindInputs();
}

EBGDamageTeam ABGPlayerCharacter::GetDamageTeam()
{
	return EBGDamageTeam::Player;
}

void ABGPlayerCharacter::BindInputs()
{
	if (APlayerController* PlayerController = Cast<APlayerController>(Controller); UEnhancedInputComponent* EnhancedInputComponent = Cast<UEnhancedInputComponent>(InputComponent))
	{
		if (MoveInputAction && MoveInputAction->ValueType == EInputActionValueType::Axis1D)
		{
			EnhancedInputComponent->BindAction(MoveInputAction, ETriggerEvent::Triggered, this, &ThisClass::HandleMoveActionTriggered);
			EnhancedInputComponent->BindAction(MoveInputAction, ETriggerEvent::Completed, this, &ThisClass::HandleMoveActionCompleted);
		}
	}
}

void ABGPlayerCharacter::HandleMoveActionTriggered(const FInputActionValue& InputValue)
{
	MoveDirection.X = FMath::Floor(InputValue.Get<float>());
	LookDirection.X = FMath::Floor(InputValue.Get<float>());
}

void ABGPlayerCharacter::HandleMoveActionCompleted(const FInputActionValue& InputValue)
{
	MoveDirection.X = 0;
}

void ABGPlayerCharacter::HandleInventoryEventBinding(bool bBind)
{
	if (UBGInventorySubsystem* InventorySubsystem = GetGameInstance()->GetSubsystem<UBGInventorySubsystem>())
	{
		if (bBind)
		{
			OnGadgetAddedHandle = InventorySubsystem->OnGadgetAdded.AddUObject(this, &ThisClass::OnGadgetAdded);
			OnGadgetRemovedHandle = InventorySubsystem->OnGadgetRemoved.AddUObject(this, &ABGPlayerCharacter::OnGadgetRemoved);
		}
		else
		{
			InventorySubsystem->OnGadgetAdded.Remove(OnGadgetAddedHandle);
			InventorySubsystem->OnGadgetRemoved.Remove(OnGadgetRemovedHandle);
		}
	}
}

void ABGPlayerCharacter::OnGadgetAdded(UBGGadgetData* Gadget)
{
	UE_LOG(LogBGPlayerCharacter, Log, TEXT("On Gadget added: %s"), *Gadget->GadgetTag.ToString())
	AddLooseGameplayTag(Gadget->GadgetTag);

	if (const TSubclassOf<UBGGasAbility> GadgetAbility = Gadget->GadgetAbilityClass)
	{
		GetAbilitySystemComponent()->TryActivateAbilityByClass(GadgetAbility);
	}
}

void ABGPlayerCharacter::OnGadgetRemoved(UBGGadgetData* Gadget)
{
	UE_LOG(LogBGPlayerCharacter, Log, TEXT("On Gadget removed: %s"), *Gadget->GadgetTag.ToString())
	RemoveLooseGameplayTag(Gadget->GadgetTag);
}